<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="accountService" class="com.lea.service.impl.AccountServiceImpl"></bean>

<!--    第三方aop实现框架 aspectJ
    1. 把通知Bean也交给spring管理
    2. 使用aop:config标签表明开始AOP配置
    3. 配置切面 使用aop:aspect标签
        id:唯一标识
        ref：指定通知类的id
    4. 在aop:aspect标签内部使用对应的标签来配置通知类型
        现在示例是让log打印在方法执行之前执行，所以使用前置通知
        aop:before: 配置前置通知
            method：指定切入点要执行的方法
            pointcut: 指定切入点表达式。表达式的含义是对业务方法层中的哪些方法增强
            切入点表达式写法：
                关键字：execution(表达式)
                表达式： ?号表示可忽略或用*/.. 匹配全部或多个
                    访问修饰符? 返回值? (包名.包名...)?类名.方法名(参数列表)
                    public * ..*Service...AccountServiceImpl.*(..)
                全通配写法：
                    * *..*.*(..)
                    * *..*Impl.*(..) 任意返回类型，任意包下 以Impl结尾的任意方法
                    * *..service..*(..) 任意service包下任意方法
                    * *..service..impl.*.*(..) 业务方法实现类的任意方法【推荐使用】
                参数列表：
                    可以直接写数据类型：
                        基本数据类型写名称
                        引用类型写包名.类名的方法 java.lang.String
                        .. 表示任意个 任意类型参数
-->
    <bean id="utils" class="com.lea.utils.Utils"></bean>
<!--    配置AOP-->
    <aop:config>
        <!--           统一切入点表达式配置，id是表达式唯一标志， expression: 指定表达式内容
                    写在aop：config标签内部只能当前标签使用，
                    它还可以写在config内，这样config标签内所有的aspect标签都可以用-->
        <aop:pointcut id="pt1" expression="execution(* *..service..impl.*.*(..))"/>
        <!-- 配置切面 -->
        <aop:aspect id="utilsAdvice" ref="utils">
            <!--            建立通知方法和切入点方法的关联-->
            <!--            pointcut="execution(* *..service..impl.*.*(..))"-->
            <!--配置前置通知类型，切入点方法执行之前执行-->
            <!--            <aop:before method="before" pointcut-ref="pt1"></aop:before>-->

            <!--配置后置通知类型，在切入点方法执行成功后执行-->
            <!--            <aop:after-returning method="after" pointcut-ref="pt1"></aop:after-returning>-->

            <!--配置异常通知类型，切入点方法执行产生异常之后执行-->
            <!--            <aop:after-throwing method="afterThrow" pointcut-ref="pt1"></aop:after-throwing>-->

            <!--配置最终通知类型，无论切入点对否正常执行，它都会在其之后执行-->
<!--            <aop:after method="afterFinally" pointcut-ref="pt1" ></aop:after>-->

<!--            配置环绕通知，具体解释在Utils around方法注释 -->
            <aop:around method="around" pointcut-ref="pt1"/>
        </aop:aspect>

    </aop:config>
</beans>